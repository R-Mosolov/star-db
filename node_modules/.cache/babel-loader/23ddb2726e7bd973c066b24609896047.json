{"ast":null,"code":"export default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.co/api';\n  }\n\n  async getResource(url) {\n    const res = await fetch(\"\".concat(this._apiBase).concat(url));\n\n    if (!res.ok) {\n      throw new Error(\"Could not fetch \".concat(url) + \", received \".concat(res.status));\n    }\n\n    return await res.json();\n  }\n\n  async getAllPeeson() {\n    const res = await this.getResource(\"/people/\");\n    return res.results.map(this._transformPerson());\n  }\n\n  async getPerson(id) {\n    const person = await this.getResource(\"/people/\".concat(id, \"/\"));\n    return this._transformPerson();\n  }\n\n  async getAllPlanets() {\n    const res = await this.getResource(\"/planets/\");\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResource(\"/planets/\".concat(id, \"/\"));\n    return this._transformPlanet(planet);\n  }\n\n  async getAllStarships() {\n    const res = await this.getResource(\"/starships/\");\n    return res.results.map(this._transformStarship);\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResource(\"/starships/\".concat(id, \"/\"));\n    return this._transformStarship();\n  }\n\n  _extractId(item) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  }\n\n  _transformPlanet(planet) {\n    return {\n      id: this._extractId(planet),\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    };\n  }\n\n  _transformStarship(starship) {\n    return {\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.costInCredits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargoCapacity\n    };\n  }\n\n  _transformPerson(person) {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.population,\n      birthYear: person.rotation_period,\n      eyeColor: person.diameter\n    };\n  }\n\n}\nconst swapi = new SwapiService();\nswapi.getPerson(3).then(p => {\n  console.log(p.name);\n});","map":{"version":3,"sources":["/Users/r.v.mosolov/Desktop/star-db/src/services/swapi-service.js"],"names":["SwapiService","_apiBase","getResource","url","res","fetch","ok","Error","status","json","getAllPeeson","results","map","_transformPerson","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","_extractId","item","idRegExp","match","name","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","length","crew","passengers","cargoCapacity","gender","birthYear","eyeColor","swapi","then","p","console","log"],"mappings":"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","sourcesContent":["export default class SwapiService {\n\n    _apiBase = 'https://swapi.co/api';\n\n    async getResource(url) {\n        const res = await fetch(`${this._apiBase}${url}`);\n\n        if (!res.ok) {\n            throw new Error(`Could not fetch ${url}` + `, received ${res.status}`)\n        }\n\n        return await res.json();\n    }\n\n    async getAllPeeson() {\n        const res = await this.getResource(`/people/`);\n        return res.results.map(this._transformPerson());\n    }\n\n    async getPerson(id) {\n        const person = await this.getResource(`/people/${id}/`);\n        return this._transformPerson();\n    }\n\n\n    async getAllPlanets() {\n        const res = await this.getResource(`/planets/`);\n        return res.results.map(this._transformPlanet);\n    }\n\n    async getPlanet(id) {\n        const planet = await this.getResource(`/planets/${id}/`);\n        return this._transformPlanet(planet);\n    }\n\n\n    async getAllStarships() {\n        const res = await this.getResource(`/starships/`);\n        return res.results.map(this._transformStarship);\n    }\n\n    async getStarship(id) {\n        const starship = await this.getResource(`/starships/${id}/`);\n        return this._transformStarship();\n    }\n\n\n    _extractId(item) {\n        const idRegExp = /\\/([0-9]*)\\/$/;\n        return item.url.match(idRegExp)[1];\n    }\n\n    _transformPlanet(planet) {\n        return {\n            id: this._extractId(planet),\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter\n        }\n    }\n\n    _transformStarship(starship) {\n        return {\n            id: this._extractId(starship),\n            name: starship.name,\n            model: starship.model,\n            manufacturer: starship.manufacturer,\n            costInCredits: starship.costInCredits,\n            length: starship.length,\n            crew: starship.crew,\n            passengers: starship.passengers,\n            cargoCapacity: starship.cargoCapacity\n        }\n    }\n\n    _transformPerson(person) {\n        return {\n            id: this._extractId(person),\n            name: person.name,\n            gender: person.population,\n            birthYear: person.rotation_period,\n            eyeColor: person.diameter\n        }\n    }\n}\n\nconst swapi = new SwapiService();\n\nswapi.getPerson(3).then((p) => {\n    console.log(p.name);\n});"]},"metadata":{},"sourceType":"module"}