{"ast":null,"code":"export default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.co/api';\n  }\n\n  async getResource(url) {\n    const res = await fetch(\"\".concat(this._apiBase).concat(url));\n\n    if (!res.ok) {\n      throw new Error(\"Could not fetch \".concat(url) + \", received \".concat(res.status));\n    }\n\n    return await res.json();\n  }\n\n  async getAllPeople() {\n    const res = await this.getResource(\"/people/\");\n    return res.results;\n  }\n\n  getPerson(id) {\n    return this.getResource(\"/people/\".concat(id, \"/\"));\n  }\n\n  async getAllPlanets() {\n    const res = await this.getResource(\"/planets/\");\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResource(\"/planets/\".concat(id, \"/\"));\n    return this._transformPlanet(planet);\n  }\n\n  async getAllStarships() {\n    const res = await this.getResource(\"/starships/\");\n    return res.results;\n  }\n\n  async getStarship(id) {\n    return await this.getResource(\"/starships/\".concat(id, \"/\"));\n  }\n\n  _extractId(item) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  }\n\n  _transformPlanet(planet) {\n    return {\n      id: this._extractId(planet),\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    };\n  }\n\n  _transformStarship(starship) {\n    return {\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.costInCredits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargoCapacity\n    };\n  }\n\n  _transformPerson(person) {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.population,\n      birthYear: person.rotation_period,\n      eyeColor: person.diameter\n    };\n  }\n\n}\nconst swapi = new SwapiService();\nswapi.getPerson(3).then(p => {\n  console.log(p.name);\n});","map":{"version":3,"sources":["/Users/r.v.mosolov/Desktop/star-db/src/services/swapi-service.js"],"names":["SwapiService","_apiBase","getResource","url","res","fetch","ok","Error","status","json","getAllPeople","results","getPerson","id","getAllPlanets","map","_transformPlanet","getPlanet","planet","getAllStarships","getStarship","_extractId","item","idRegExp","match","name","population","rotationPeriod","rotation_period","diameter","_transformStarship","starship","model","manufacturer","costInCredits","length","crew","passengers","cargoCapacity","_transformPerson","person","gender","birthYear","eyeColor","swapi","then","p","console","log"],"mappings":"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","sourcesContent":["export default class SwapiService {\n\n    _apiBase = 'https://swapi.co/api';\n\n    async getResource(url) {\n        const res = await fetch(`${this._apiBase}${url}`);\n\n        if (!res.ok) {\n            throw new Error(`Could not fetch ${url}` + `, received ${res.status}`)\n        }\n\n        return await res.json();\n    }\n\n    async getAllPeople() {\n        const res = await this.getResource(`/people/`);\n        return res.results;\n    }\n\n    getPerson(id) {\n        return this.getResource(`/people/${id}/`);\n    }\n\n    async getAllPlanets() {\n        const res = await this.getResource(`/planets/`);\n        return res.results.map(this._transformPlanet );\n    }\n\n    async getPlanet(id) {\n        const planet = await this.getResource(`/planets/${id}/`);\n        return this._transformPlanet(planet);\n    }\n\n    async getAllStarships() {\n        const res = await this.getResource(`/starships/`);\n        return res.results;\n    }\n\n    async getStarship(id) {\n        return await this.getResource(`/starships/${id}/`);\n    }\n\n    _extractId(item) {\n        const idRegExp = /\\/([0-9]*)\\/$/;\n        return item.url.match(idRegExp)[1];\n    }\n\n    _transformPlanet(planet) {\n        return {\n            id: this._extractId(planet),\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter\n        }\n    }\n\n    _transformStarship(starship) {\n        return {\n            id: this._extractId(starship),\n            name: starship.name,\n            model: starship.model,\n            manufacturer: starship.manufacturer,\n            costInCredits: starship.costInCredits,\n            length: starship.length,\n            crew: starship.crew,\n            passengers: starship.passengers,\n            cargoCapacity: starship.cargoCapacity\n        }\n    }\n\n    _transformPerson(person) {\n        return {\n            id: this._extractId(person),\n            name: person.name,\n            gender: person.population,\n            birthYear: person.rotation_period,\n            eyeColor: person.diameter\n        }\n    }\n}\n\nconst swapi = new SwapiService();\n\nswapi.getPerson(3).then((p) => {\n    console.log(p.name);\n});"]},"metadata":{},"sourceType":"module"}