{"ast":null,"code":"var _jsxFileName = \"/Users/r.v.mosolov/Desktop/star-db/src/components/random-planet/random-planet.js\";\nimport React, { Component, Fragment } from 'react';\nimport SwapiService from '../../services/swapi-service';\nimport './random-planet.css';\nimport Spinner from '../spinner';\nimport ErrorIndicator from \"../error-indicator\";\nexport default class RandomPlanet extends Component {\n  constructor() {\n    super();\n    this.swapiService = new SwapiService();\n    this.state = {\n      planet: {},\n      loading: true\n    };\n\n    this.onPlanetLoaded = planet => {\n      console.log('update');\n      this.setState({\n        planet,\n        loading: false,\n        error: false\n      });\n    };\n\n    this.onError = () => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    };\n\n    this.updatePlanet = () => {\n      const id = Math.floor(Math.random() * 12) + 3;\n      this.swapiService.getPlanet(id).then(this.onPlanetLoaded).catch(this.onError);\n    };\n\n    this.updatePlanet();\n    setInterval(this.updatePlanet, 2500);\n    console.log('constructor()');\n  }\n\n  render() {\n    const _this$state = this.state,\n          planet = _this$state.planet,\n          loading = _this$state.loading,\n          error = _this$state.error;\n    const hasData = !(loading || error);\n    const errorMessage = error ? React.createElement(ErrorIndicator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }) : null;\n    const spinner = loading ? React.createElement(\"div\", {\n      className: \"d-flex align-items-center m-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })) : null;\n    const content = hasData ? React.createElement(PlanetView, {\n      planet: planet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }) : null;\n    return React.createElement(\"nav\", {\n      className: \"random-planet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"d-flex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, errorMessage, spinner, content)), React.createElement(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: this.updatePlanet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Toggle Random Planet\"));\n  }\n\n}\n;\n\nconst PlanetView = ({\n  planet\n}) => {\n  const id = planet.id,\n        name = planet.name,\n        population = planet.population,\n        rotationPeriod = planet.rotationPeriod,\n        diameter = planet.diameter;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"card-img m-3 rounded-lg\",\n    alt: \"Planet Image\",\n    src: \"https://starwars-visualguide.com/assets/img/planets/\".concat(id, \".jpg\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"d-flex align-items-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, name), React.createElement(\"table\", {\n    className: \"table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    className: \"d-flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    className: \"w-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Population\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, population)), React.createElement(\"tr\", {\n    className: \"d-flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    className: \"w-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Rotation Period\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, rotationPeriod)), React.createElement(\"tr\", {\n    className: \"d-flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    className: \"w-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Diameter\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, diameter))))));\n};","map":{"version":3,"sources":["/Users/r.v.mosolov/Desktop/star-db/src/components/random-planet/random-planet.js"],"names":["React","Component","Fragment","SwapiService","Spinner","ErrorIndicator","RandomPlanet","constructor","swapiService","state","planet","loading","onPlanetLoaded","console","log","setState","error","onError","updatePlanet","id","Math","floor","random","getPlanet","then","catch","setInterval","render","hasData","errorMessage","spinner","content","PlanetView","name","population","rotationPeriod","diameter"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\n\nimport SwapiService from '../../services/swapi-service';\n\nimport './random-planet.css';\nimport Spinner from '../spinner';\nimport ErrorIndicator from \"../error-indicator\";\n\nexport default class RandomPlanet extends Component {\n\n    swapiService = new SwapiService();\n\n    state = {\n        planet: {},\n        loading: true\n    };\n\n    constructor() {\n        super();\n        this.updatePlanet();\n        setInterval(this.updatePlanet, 2500);\n        console.log('constructor()');\n    }\n\n    onPlanetLoaded = (planet) => {\n        console.log('update');\n        this.setState({\n            planet,\n            loading: false,\n            error: false\n        })\n    };\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        });\n    };\n\n    updatePlanet = () => {\n        const id = Math.floor(Math.random() * 12) + 3;\n        this.swapiService.getPlanet(id).then(this.onPlanetLoaded).catch(this.onError);\n    };\n\n    render() {\n        const { planet, loading, error } = this.state;\n\n        const hasData = !(loading || error);\n\n        const errorMessage = error ? <ErrorIndicator/> : null;\n        const spinner = loading ? <div className=\"d-flex align-items-center m-auto\"><Spinner/></div> : null;\n        const content = hasData ? <PlanetView planet={planet}/> : null;\n\n        return (\n            <nav className=\"random-planet\">\n                <div className=\"card\">\n                    <div className=\"d-flex\">\n                        {errorMessage}\n                        {spinner}\n                        {content}\n                    </div>\n                </div>\n                <button\n                    className=\"btn btn-warning\"\n                    onClick={this.updatePlanet}>Toggle Random Planet</button>\n            </nav>\n        )\n    }\n};\n\nconst PlanetView = ({ planet }) => {\n\n    const { id, name, population, rotationPeriod, diameter } = planet;\n\n    return (\n        <Fragment>\n            <div>\n                <img className=\"card-img m-3 rounded-lg\"\n                     alt=\"Planet Image\"\n                     src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}/>\n            </div>\n            <div className=\"d-flex align-items-center\">\n                <div>\n                    <h2>{name}</h2>\n                    <table className=\"table\">\n                        <tr className=\"d-flex\">\n                            <th className=\"w-100\">Population</th>\n                            <td>{population}</td>\n                        </tr>\n                        <tr className=\"d-flex\">\n                            <th className=\"w-100\">Rotation Period</th>\n                            <td>{rotationPeriod}</td>\n                        </tr>\n                        <tr className=\"d-flex\">\n                            <th className=\"w-100\">Diameter</th>\n                            <td>{diameter}</td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n        </Fragment>\n    )\n};"]},"metadata":{},"sourceType":"module"}